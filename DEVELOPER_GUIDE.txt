# School Website Developer Guide

## โครงสร้างโปรเจค (Project Structure)

```
my-school-website/
├── public/
│   └── images/           # ไฟล์รูปภาพทั้งหมด
│       ├── favicon.ico
│       ├── logo.png      # โลโก้โรงเรียน
│       ├── banners/      # รูปแบนเนอร์หน้าแรก
│       ├── news/         # รูปข่าวสาร
│       ├── events/       # รูปกิจกรรม
│       └── gallery/      # รูปแกลเลอรี่
├── src/
│   ├── app/              # Next.js App Router pages
│   │   ├── layout.tsx    # Layout หลัก
│   │   ├── page.tsx      # หน้าแรก
│   │   ├── about/        # หน้าเกี่ยวกับเรา
│   │   ├── news/         # หน้าข่าวสาร
│   │   ├── events/       # หน้ากิจกรรม
│   │   ├── courses/      # หน้าหลักสูตร
│   │   └── contact/      # หน้าติดต่อ
│   ├── components/       # React Components
│   │   ├── Navbar.tsx
│   │   ├── Footer.tsx
│   │   ├── NewsCard.tsx
│   │   ├── EventCard.tsx
│   │   ├── ContactForm.tsx
│   │   └── LanguageSwitcher.tsx
│   ├── contexts/         # React Contexts
│   │   └── LanguageContext.tsx
│   ├── locales/          # ไฟล์แปลภาษา
│   │   ├── th.ts         # ภาษาไทย
│   │   ├── en.ts         # ภาษาอังกฤษ
│   │   ├── zh.ts         # ภาษาจีน
│   │   └── index.ts      # Export ทั้งหมด
│   └── styles/
│       └── globals.css   # CSS หลัก
└── package.json
```

## การจัดการรูปภาพ (Image Management)

### 1. ที่เก็บรูปภาพ
- ทุกรูปภาพเก็บใน `public/images/`
- แบ่งโฟลเดอร์ตามประเภท: banners/, news/, events/, gallery/
- ใช้ชื่อไฟล์ที่สื่อความหมาย เช่น `news-admission-2024.jpg`

### 2. การใช้รูปภาพในโค้ด
```tsx
// ใน Component
<img src="/images/news/news-admission-2024.jpg" alt="ข่าวรับสมัคร" />

// ใน Next.js Image component
import Image from 'next/image'
<Image 
  src="/images/banners/school-banner.jpg" 
  alt="แบนเนอร์โรงเรียน"
  width={800}
  height={400}
/>
```

### 3. ขนาดรูปภาพที่แนะนำ
- แบนเนอร์หน้าแรก: 1920x800px
- รูปข่าวสาร: 400x300px
- รูปกิจกรรม: 400x300px
- โลโก้: 200x200px (PNG พื้นหลังใส)

## การจัดการภาษา (Internationalization)

### 1. เพิ่มข้อความใหม่
แก้ไขไฟล์ใน `src/locales/`:

```typescript
// src/locales/th.ts
export const th = {
  nav: {
    home: 'หน้าแรก',
    about: 'เกี่ยวกับเรา',
    news: 'ข่าวสาร',
    // เพิ่มข้อความใหม่ที่นี่
    newSection: 'หัวข้อใหม่'
  }
}

// src/locales/en.ts
export const en = {
  nav: {
    home: 'Home',
    about: 'About',
    news: 'News',
    // เพิ่มข้อความใหม่ที่นี่
    newSection: 'New Section'
  }
}

// src/locales/zh.ts
export const zh = {
  nav: {
    home: '首页',
    about: '关于我们',
    news: '新闻',
    // เพิ่มข้อความใหม่ที่นี่
    newSection: '新版块'
  }
}
```

### 2. การใช้งานในคอมโพเนนต์
```tsx
import { useLanguage } from '@/contexts/LanguageContext'

function MyComponent() {
  const { t } = useLanguage()
  
  return (
    <div>
      <h1>{t.nav.newSection}</h1>
    </div>
  )
}
```

### 3. เพิ่มภาษาใหม่
1. สร้างไฟล์ใหม่ เช่น `src/locales/jp.ts`
2. เพิ่มใน `src/locales/index.ts`:
```typescript
import { jp } from './jp'
export const translations = { th, en, zh, jp }
```
3. เพิ่มใน `LanguageSwitcher.tsx`:
```tsx
const languages = [
  { code: 'th', name: 'ไทย', flag: '🇹🇭' },
  { code: 'en', name: 'English', flag: '🇺🇸' },
  { code: 'zh', name: '中文', flag: '🇨🇳' },
  { code: 'jp', name: '日本語', flag: '🇯🇵' }
]
```

## การเพิ่มข่าวสารและกิจกรรม

### 1. เพิ่มข่าวสาร
แก้ไข `newsData` ใน `src/app/page.tsx`:
```typescript
const newsData = [
  {
    id: 4, // ID ใหม่
    title: 'หัวข้อข่าวใหม่',
    excerpt: 'สรุปข่าวสั้นๆ',
    date: '2024-03-01',
    image: '/images/news/news-new-2024.jpg', // เพิ่มรูปภาพ
    slug: 'news-new-2024'
  },
  // ... ข่าวอื่นๆ
]
```

### 2. เพิ่มกิจกรรม
แก้ไข `eventsData` ใน `src/app/page.tsx`:
```typescript
const eventsData = [
  {
    id: 4, // ID ใหม่
    title: 'กิจกรรมใหม่',
    date: '2024-03-15',
    time: '09:00 - 17:00',
    location: 'ห้องประชุม',
    image: '/images/events/event-new-2024.jpg', // เพิ่มรูปภาพ
    slug: 'event-new-2024'
  },
  // ... กิจกรรมอื่นๆ
]
```

## การปรับแต่ง Styling

### 1. Tailwind CSS Classes ที่ใช้บ่อย
- `btn-primary`: ปุ่มหลัก (สีน้ำเงิน)
- `btn-secondary`: ปุ่มรอง (สีขาว)
- `card`: การ์ดพื้นฐาน
- `text-primary-600`: ข้อความสีน้ำเงิน

### 2. การเพิ่ม CSS ใหม่
แก้ไขใน `src/styles/globals.css`:
```css
.custom-class {
  @apply bg-blue-500 text-white p-4 rounded;
}
```

### 3. สีหลักของเว็บไซต์
- Primary: Blue (blue-600, blue-700, blue-800)
- Secondary: Gray (gray-50, gray-100, gray-600)
- Accent: White

## การเพิ่มหน้าใหม่

### 1. สร้างโฟลเดอร์และไฟล์
```
src/app/new-page/
└── page.tsx
```

### 2. เพิ่มลิงก์ใน Navbar
แก้ไข `src/components/Navbar.tsx`:
```tsx
const navItems = [
  { href: '/', label: t.nav.home },
  { href: '/about', label: t.nav.about },
  { href: '/news', label: t.nav.news },
  { href: '/new-page', label: t.nav.newPage }, // เพิ่มใหม่
  // ... อื่นๆ
]
```

### 3. เพิ่มการแปลภาษา
เพิ่มใน `src/locales/*.ts`:
```typescript
nav: {
  // ... อื่นๆ
  newPage: 'หน้าใหม่' // ภาษาไทย
}
```

## การ Deploy

### 1. Build โปรเจค
```bash
npm run build
```

### 2. ทดสอบ Production
```bash
npm start
```

### 3. Environment Variables
สร้างไฟล์ `.env.local`:
```
NEXT_PUBLIC_SITE_URL=https://yourschool.com
NEXT_PUBLIC_CONTACT_EMAIL=contact@yourschool.com
```

## การบำรุงรักษา

### 1. อัพเดท Dependencies
```bash
npm update
```

### 2. ตรวจสอบ Security
```bash
npm audit
npm audit fix
```

### 3. การ Backup
- สำรองข้อมูลใน `src/` และ `public/`
- สำรอง Database (ถ้ามี)
- สำรอง Environment Variables

## Tips สำหรับ Developer

1. **ใช้ TypeScript**: ทุกไฟล์ใหม่ควรเป็น `.tsx` หรือ `.ts`
2. **Component Reusability**: สร้าง Component ที่ใช้ซ้ำได้
3. **Responsive Design**: ทดสอบบนหน้าจอขนาดต่างๆ
4. **Performance**: ใช้ Next.js Image component สำหรับรูปภาพ
5. **SEO**: เพิ่ม metadata ในทุกหน้า
6. **Accessibility**: ใส่ alt text และ aria labels

## การติดต่อ

หากมีปัญหาหรือข้อสงสัย:
- ดูเอกสาร Next.js: https://nextjs.org/docs
- ดูเอกสาร Tailwind CSS: https://tailwindcss.com/docs
- ดูเอกสาร TypeScript: https://www.typescriptlang.org/docs
```
